// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `
  type AggregateComment {
    count: Int!
  }

  type AggregateFile {
    count: Int!
  }

  type AggregatePost {
    count: Int!
  }

  type AggregateRent {
    count: Int!
  }

  type AggregateUser {
    count: Int!
  }

  type BatchPayload {
    count: Long!
  }

  type Comment {
    id: ID!
    text: String!
    user: User
    post: Post
    createdAt: DateTime
    updatedAt: DateTime
  }

  type CommentConnection {
    pageInfo: PageInfo!
    edges: [CommentEdge]!
    aggregate: AggregateComment!
  }

  input CommentCreateInput {
    id: ID
    text: String!
    user: UserCreateOneWithoutCommentsInput
    post: PostCreateOneWithoutCommentsInput
  }

  input CommentCreateManyWithoutPostInput {
    create: [CommentCreateWithoutPostInput!]
    connect: [CommentWhereUniqueInput!]
  }

  input CommentCreateManyWithoutUserInput {
    create: [CommentCreateWithoutUserInput!]
    connect: [CommentWhereUniqueInput!]
  }

  input CommentCreateWithoutPostInput {
    id: ID
    text: String!
    user: UserCreateOneWithoutCommentsInput
  }

  input CommentCreateWithoutUserInput {
    id: ID
    text: String!
    post: PostCreateOneWithoutCommentsInput
  }

  type CommentEdge {
    node: Comment!
    cursor: String!
  }

  enum CommentOrderByInput {
    id_ASC
    id_DESC
    text_ASC
    text_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type CommentPreviousValues {
    id: ID!
    text: String!
    createdAt: DateTime
    updatedAt: DateTime
  }

  input CommentScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    text: String
    text_not: String
    text_in: [String!]
    text_not_in: [String!]
    text_lt: String
    text_lte: String
    text_gt: String
    text_gte: String
    text_contains: String
    text_not_contains: String
    text_starts_with: String
    text_not_starts_with: String
    text_ends_with: String
    text_not_ends_with: String
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [CommentScalarWhereInput!]
    OR: [CommentScalarWhereInput!]
    NOT: [CommentScalarWhereInput!]
  }

  type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
    updatedFields: [String!]
    previousValues: CommentPreviousValues
  }

  input CommentSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: CommentWhereInput
    AND: [CommentSubscriptionWhereInput!]
    OR: [CommentSubscriptionWhereInput!]
    NOT: [CommentSubscriptionWhereInput!]
  }

  input CommentUpdateInput {
    text: String
    user: UserUpdateOneWithoutCommentsInput
    post: PostUpdateOneWithoutCommentsInput
  }

  input CommentUpdateManyDataInput {
    text: String
  }

  input CommentUpdateManyMutationInput {
    text: String
  }

  input CommentUpdateManyWithoutPostInput {
    create: [CommentCreateWithoutPostInput!]
    delete: [CommentWhereUniqueInput!]
    connect: [CommentWhereUniqueInput!]
    set: [CommentWhereUniqueInput!]
    disconnect: [CommentWhereUniqueInput!]
    update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
    upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
    deleteMany: [CommentScalarWhereInput!]
    updateMany: [CommentUpdateManyWithWhereNestedInput!]
  }

  input CommentUpdateManyWithoutUserInput {
    create: [CommentCreateWithoutUserInput!]
    delete: [CommentWhereUniqueInput!]
    connect: [CommentWhereUniqueInput!]
    set: [CommentWhereUniqueInput!]
    disconnect: [CommentWhereUniqueInput!]
    update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
    upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
    deleteMany: [CommentScalarWhereInput!]
    updateMany: [CommentUpdateManyWithWhereNestedInput!]
  }

  input CommentUpdateManyWithWhereNestedInput {
    where: CommentScalarWhereInput!
    data: CommentUpdateManyDataInput!
  }

  input CommentUpdateWithoutPostDataInput {
    text: String
    user: UserUpdateOneWithoutCommentsInput
  }

  input CommentUpdateWithoutUserDataInput {
    text: String
    post: PostUpdateOneWithoutCommentsInput
  }

  input CommentUpdateWithWhereUniqueWithoutPostInput {
    where: CommentWhereUniqueInput!
    data: CommentUpdateWithoutPostDataInput!
  }

  input CommentUpdateWithWhereUniqueWithoutUserInput {
    where: CommentWhereUniqueInput!
    data: CommentUpdateWithoutUserDataInput!
  }

  input CommentUpsertWithWhereUniqueWithoutPostInput {
    where: CommentWhereUniqueInput!
    update: CommentUpdateWithoutPostDataInput!
    create: CommentCreateWithoutPostInput!
  }

  input CommentUpsertWithWhereUniqueWithoutUserInput {
    where: CommentWhereUniqueInput!
    update: CommentUpdateWithoutUserDataInput!
    create: CommentCreateWithoutUserInput!
  }

  input CommentWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    text: String
    text_not: String
    text_in: [String!]
    text_not_in: [String!]
    text_lt: String
    text_lte: String
    text_gt: String
    text_gte: String
    text_contains: String
    text_not_contains: String
    text_starts_with: String
    text_not_starts_with: String
    text_ends_with: String
    text_not_ends_with: String
    user: UserWhereInput
    post: PostWhereInput
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [CommentWhereInput!]
    OR: [CommentWhereInput!]
    NOT: [CommentWhereInput!]
  }

  input CommentWhereUniqueInput {
    id: ID
  }

  scalar DateTime

  type File {
    id: ID!
    url: String!
    post: Post
    createdAt: DateTime
    updatedAt: DateTime
  }

  type FileConnection {
    pageInfo: PageInfo!
    edges: [FileEdge]!
    aggregate: AggregateFile!
  }

  input FileCreateInput {
    id: ID
    url: String!
    post: PostCreateOneWithoutFilesInput
  }

  input FileCreateManyWithoutPostInput {
    create: [FileCreateWithoutPostInput!]
    connect: [FileWhereUniqueInput!]
  }

  input FileCreateWithoutPostInput {
    id: ID
    url: String!
  }

  type FileEdge {
    node: File!
    cursor: String!
  }

  enum FileOrderByInput {
    id_ASC
    id_DESC
    url_ASC
    url_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type FilePreviousValues {
    id: ID!
    url: String!
    createdAt: DateTime
    updatedAt: DateTime
  }

  input FileScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    url: String
    url_not: String
    url_in: [String!]
    url_not_in: [String!]
    url_lt: String
    url_lte: String
    url_gt: String
    url_gte: String
    url_contains: String
    url_not_contains: String
    url_starts_with: String
    url_not_starts_with: String
    url_ends_with: String
    url_not_ends_with: String
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [FileScalarWhereInput!]
    OR: [FileScalarWhereInput!]
    NOT: [FileScalarWhereInput!]
  }

  type FileSubscriptionPayload {
    mutation: MutationType!
    node: File
    updatedFields: [String!]
    previousValues: FilePreviousValues
  }

  input FileSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: FileWhereInput
    AND: [FileSubscriptionWhereInput!]
    OR: [FileSubscriptionWhereInput!]
    NOT: [FileSubscriptionWhereInput!]
  }

  input FileUpdateInput {
    url: String
    post: PostUpdateOneWithoutFilesInput
  }

  input FileUpdateManyDataInput {
    url: String
  }

  input FileUpdateManyMutationInput {
    url: String
  }

  input FileUpdateManyWithoutPostInput {
    create: [FileCreateWithoutPostInput!]
    delete: [FileWhereUniqueInput!]
    connect: [FileWhereUniqueInput!]
    set: [FileWhereUniqueInput!]
    disconnect: [FileWhereUniqueInput!]
    update: [FileUpdateWithWhereUniqueWithoutPostInput!]
    upsert: [FileUpsertWithWhereUniqueWithoutPostInput!]
    deleteMany: [FileScalarWhereInput!]
    updateMany: [FileUpdateManyWithWhereNestedInput!]
  }

  input FileUpdateManyWithWhereNestedInput {
    where: FileScalarWhereInput!
    data: FileUpdateManyDataInput!
  }

  input FileUpdateWithoutPostDataInput {
    url: String
  }

  input FileUpdateWithWhereUniqueWithoutPostInput {
    where: FileWhereUniqueInput!
    data: FileUpdateWithoutPostDataInput!
  }

  input FileUpsertWithWhereUniqueWithoutPostInput {
    where: FileWhereUniqueInput!
    update: FileUpdateWithoutPostDataInput!
    create: FileCreateWithoutPostInput!
  }

  input FileWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    url: String
    url_not: String
    url_in: [String!]
    url_not_in: [String!]
    url_lt: String
    url_lte: String
    url_gt: String
    url_gte: String
    url_contains: String
    url_not_contains: String
    url_starts_with: String
    url_not_starts_with: String
    url_ends_with: String
    url_not_ends_with: String
    post: PostWhereInput
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [FileWhereInput!]
    OR: [FileWhereInput!]
    NOT: [FileWhereInput!]
  }

  input FileWhereUniqueInput {
    id: ID
  }

  scalar Long

  type Mutation {
    createComment(data: CommentCreateInput!): Comment!
    updateComment(
      data: CommentUpdateInput!
      where: CommentWhereUniqueInput!
    ): Comment
    updateManyComments(
      data: CommentUpdateManyMutationInput!
      where: CommentWhereInput
    ): BatchPayload!
    upsertComment(
      where: CommentWhereUniqueInput!
      create: CommentCreateInput!
      update: CommentUpdateInput!
    ): Comment!
    deleteComment(where: CommentWhereUniqueInput!): Comment
    deleteManyComments(where: CommentWhereInput): BatchPayload!
    createFile(data: FileCreateInput!): File!
    updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
    updateManyFiles(
      data: FileUpdateManyMutationInput!
      where: FileWhereInput
    ): BatchPayload!
    upsertFile(
      where: FileWhereUniqueInput!
      create: FileCreateInput!
      update: FileUpdateInput!
    ): File!
    deleteFile(where: FileWhereUniqueInput!): File
    deleteManyFiles(where: FileWhereInput): BatchPayload!
    createPost(data: PostCreateInput!): Post!
    updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
    updateManyPosts(
      data: PostUpdateManyMutationInput!
      where: PostWhereInput
    ): BatchPayload!
    upsertPost(
      where: PostWhereUniqueInput!
      create: PostCreateInput!
      update: PostUpdateInput!
    ): Post!
    deletePost(where: PostWhereUniqueInput!): Post
    deleteManyPosts(where: PostWhereInput): BatchPayload!
    createRent(data: RentCreateInput!): Rent!
    updateRent(data: RentUpdateInput!, where: RentWhereUniqueInput!): Rent
    upsertRent(
      where: RentWhereUniqueInput!
      create: RentCreateInput!
      update: RentUpdateInput!
    ): Rent!
    deleteRent(where: RentWhereUniqueInput!): Rent
    deleteManyRents(where: RentWhereInput): BatchPayload!
    createUser(data: UserCreateInput!): User!
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateManyUsers(
      data: UserUpdateManyMutationInput!
      where: UserWhereInput
    ): BatchPayload!
    upsertUser(
      where: UserWhereUniqueInput!
      create: UserCreateInput!
      update: UserUpdateInput!
    ): User!
    deleteUser(where: UserWhereUniqueInput!): User
    deleteManyUsers(where: UserWhereInput): BatchPayload!
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  interface Node {
    id: ID!
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Post {
    id: ID!
    user: User!
    title: String!
    location: String!
    desc: String!
    files(
      where: FileWhereInput
      orderBy: FileOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [File!]
    comments(
      where: CommentWhereInput
      orderBy: CommentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Comment!]
    rents(
      where: RentWhereInput
      orderBy: RentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Rent!]
    createdAt: DateTime
    updatedAt: DateTime
  }

  type PostConnection {
    pageInfo: PageInfo!
    edges: [PostEdge]!
    aggregate: AggregatePost!
  }

  input PostCreateInput {
    id: ID
    user: UserCreateOneWithoutPostInput!
    title: String!
    location: String!
    desc: String!
    files: FileCreateManyWithoutPostInput
    comments: CommentCreateManyWithoutPostInput
    rents: RentCreateManyWithoutPostInput
  }

  input PostCreateManyWithoutUserInput {
    create: [PostCreateWithoutUserInput!]
    connect: [PostWhereUniqueInput!]
  }

  input PostCreateOneWithoutCommentsInput {
    create: PostCreateWithoutCommentsInput
    connect: PostWhereUniqueInput
  }

  input PostCreateOneWithoutFilesInput {
    create: PostCreateWithoutFilesInput
    connect: PostWhereUniqueInput
  }

  input PostCreateOneWithoutRentsInput {
    create: PostCreateWithoutRentsInput
    connect: PostWhereUniqueInput
  }

  input PostCreateWithoutCommentsInput {
    id: ID
    user: UserCreateOneWithoutPostInput!
    title: String!
    location: String!
    desc: String!
    files: FileCreateManyWithoutPostInput
    rents: RentCreateManyWithoutPostInput
  }

  input PostCreateWithoutFilesInput {
    id: ID
    user: UserCreateOneWithoutPostInput!
    title: String!
    location: String!
    desc: String!
    comments: CommentCreateManyWithoutPostInput
    rents: RentCreateManyWithoutPostInput
  }

  input PostCreateWithoutRentsInput {
    id: ID
    user: UserCreateOneWithoutPostInput!
    title: String!
    location: String!
    desc: String!
    files: FileCreateManyWithoutPostInput
    comments: CommentCreateManyWithoutPostInput
  }

  input PostCreateWithoutUserInput {
    id: ID
    title: String!
    location: String!
    desc: String!
    files: FileCreateManyWithoutPostInput
    comments: CommentCreateManyWithoutPostInput
    rents: RentCreateManyWithoutPostInput
  }

  type PostEdge {
    node: Post!
    cursor: String!
  }

  enum PostOrderByInput {
    id_ASC
    id_DESC
    title_ASC
    title_DESC
    location_ASC
    location_DESC
    desc_ASC
    desc_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type PostPreviousValues {
    id: ID!
    title: String!
    location: String!
    desc: String!
    createdAt: DateTime
    updatedAt: DateTime
  }

  input PostScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    title: String
    title_not: String
    title_in: [String!]
    title_not_in: [String!]
    title_lt: String
    title_lte: String
    title_gt: String
    title_gte: String
    title_contains: String
    title_not_contains: String
    title_starts_with: String
    title_not_starts_with: String
    title_ends_with: String
    title_not_ends_with: String
    location: String
    location_not: String
    location_in: [String!]
    location_not_in: [String!]
    location_lt: String
    location_lte: String
    location_gt: String
    location_gte: String
    location_contains: String
    location_not_contains: String
    location_starts_with: String
    location_not_starts_with: String
    location_ends_with: String
    location_not_ends_with: String
    desc: String
    desc_not: String
    desc_in: [String!]
    desc_not_in: [String!]
    desc_lt: String
    desc_lte: String
    desc_gt: String
    desc_gte: String
    desc_contains: String
    desc_not_contains: String
    desc_starts_with: String
    desc_not_starts_with: String
    desc_ends_with: String
    desc_not_ends_with: String
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [PostScalarWhereInput!]
    OR: [PostScalarWhereInput!]
    NOT: [PostScalarWhereInput!]
  }

  type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
    updatedFields: [String!]
    previousValues: PostPreviousValues
  }

  input PostSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: PostWhereInput
    AND: [PostSubscriptionWhereInput!]
    OR: [PostSubscriptionWhereInput!]
    NOT: [PostSubscriptionWhereInput!]
  }

  input PostUpdateInput {
    user: UserUpdateOneRequiredWithoutPostInput
    title: String
    location: String
    desc: String
    files: FileUpdateManyWithoutPostInput
    comments: CommentUpdateManyWithoutPostInput
    rents: RentUpdateManyWithoutPostInput
  }

  input PostUpdateManyDataInput {
    title: String
    location: String
    desc: String
  }

  input PostUpdateManyMutationInput {
    title: String
    location: String
    desc: String
  }

  input PostUpdateManyWithoutUserInput {
    create: [PostCreateWithoutUserInput!]
    delete: [PostWhereUniqueInput!]
    connect: [PostWhereUniqueInput!]
    set: [PostWhereUniqueInput!]
    disconnect: [PostWhereUniqueInput!]
    update: [PostUpdateWithWhereUniqueWithoutUserInput!]
    upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
    deleteMany: [PostScalarWhereInput!]
    updateMany: [PostUpdateManyWithWhereNestedInput!]
  }

  input PostUpdateManyWithWhereNestedInput {
    where: PostScalarWhereInput!
    data: PostUpdateManyDataInput!
  }

  input PostUpdateOneRequiredWithoutRentsInput {
    create: PostCreateWithoutRentsInput
    update: PostUpdateWithoutRentsDataInput
    upsert: PostUpsertWithoutRentsInput
    connect: PostWhereUniqueInput
  }

  input PostUpdateOneWithoutCommentsInput {
    create: PostCreateWithoutCommentsInput
    update: PostUpdateWithoutCommentsDataInput
    upsert: PostUpsertWithoutCommentsInput
    delete: Boolean
    disconnect: Boolean
    connect: PostWhereUniqueInput
  }

  input PostUpdateOneWithoutFilesInput {
    create: PostCreateWithoutFilesInput
    update: PostUpdateWithoutFilesDataInput
    upsert: PostUpsertWithoutFilesInput
    delete: Boolean
    disconnect: Boolean
    connect: PostWhereUniqueInput
  }

  input PostUpdateWithoutCommentsDataInput {
    user: UserUpdateOneRequiredWithoutPostInput
    title: String
    location: String
    desc: String
    files: FileUpdateManyWithoutPostInput
    rents: RentUpdateManyWithoutPostInput
  }

  input PostUpdateWithoutFilesDataInput {
    user: UserUpdateOneRequiredWithoutPostInput
    title: String
    location: String
    desc: String
    comments: CommentUpdateManyWithoutPostInput
    rents: RentUpdateManyWithoutPostInput
  }

  input PostUpdateWithoutRentsDataInput {
    user: UserUpdateOneRequiredWithoutPostInput
    title: String
    location: String
    desc: String
    files: FileUpdateManyWithoutPostInput
    comments: CommentUpdateManyWithoutPostInput
  }

  input PostUpdateWithoutUserDataInput {
    title: String
    location: String
    desc: String
    files: FileUpdateManyWithoutPostInput
    comments: CommentUpdateManyWithoutPostInput
    rents: RentUpdateManyWithoutPostInput
  }

  input PostUpdateWithWhereUniqueWithoutUserInput {
    where: PostWhereUniqueInput!
    data: PostUpdateWithoutUserDataInput!
  }

  input PostUpsertWithoutCommentsInput {
    update: PostUpdateWithoutCommentsDataInput!
    create: PostCreateWithoutCommentsInput!
  }

  input PostUpsertWithoutFilesInput {
    update: PostUpdateWithoutFilesDataInput!
    create: PostCreateWithoutFilesInput!
  }

  input PostUpsertWithoutRentsInput {
    update: PostUpdateWithoutRentsDataInput!
    create: PostCreateWithoutRentsInput!
  }

  input PostUpsertWithWhereUniqueWithoutUserInput {
    where: PostWhereUniqueInput!
    update: PostUpdateWithoutUserDataInput!
    create: PostCreateWithoutUserInput!
  }

  input PostWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    user: UserWhereInput
    title: String
    title_not: String
    title_in: [String!]
    title_not_in: [String!]
    title_lt: String
    title_lte: String
    title_gt: String
    title_gte: String
    title_contains: String
    title_not_contains: String
    title_starts_with: String
    title_not_starts_with: String
    title_ends_with: String
    title_not_ends_with: String
    location: String
    location_not: String
    location_in: [String!]
    location_not_in: [String!]
    location_lt: String
    location_lte: String
    location_gt: String
    location_gte: String
    location_contains: String
    location_not_contains: String
    location_starts_with: String
    location_not_starts_with: String
    location_ends_with: String
    location_not_ends_with: String
    desc: String
    desc_not: String
    desc_in: [String!]
    desc_not_in: [String!]
    desc_lt: String
    desc_lte: String
    desc_gt: String
    desc_gte: String
    desc_contains: String
    desc_not_contains: String
    desc_starts_with: String
    desc_not_starts_with: String
    desc_ends_with: String
    desc_not_ends_with: String
    files_every: FileWhereInput
    files_some: FileWhereInput
    files_none: FileWhereInput
    comments_every: CommentWhereInput
    comments_some: CommentWhereInput
    comments_none: CommentWhereInput
    rents_every: RentWhereInput
    rents_some: RentWhereInput
    rents_none: RentWhereInput
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [PostWhereInput!]
    OR: [PostWhereInput!]
    NOT: [PostWhereInput!]
  }

  input PostWhereUniqueInput {
    id: ID
  }

  type Query {
    comment(where: CommentWhereUniqueInput!): Comment
    comments(
      where: CommentWhereInput
      orderBy: CommentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Comment]!
    commentsConnection(
      where: CommentWhereInput
      orderBy: CommentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): CommentConnection!
    file(where: FileWhereUniqueInput!): File
    files(
      where: FileWhereInput
      orderBy: FileOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [File]!
    filesConnection(
      where: FileWhereInput
      orderBy: FileOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): FileConnection!
    post(where: PostWhereUniqueInput!): Post
    posts(
      where: PostWhereInput
      orderBy: PostOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Post]!
    postsConnection(
      where: PostWhereInput
      orderBy: PostOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): PostConnection!
    rent(where: RentWhereUniqueInput!): Rent
    rents(
      where: RentWhereInput
      orderBy: RentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Rent]!
    rentsConnection(
      where: RentWhereInput
      orderBy: RentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): RentConnection!
    user(where: UserWhereUniqueInput!): User
    users(
      where: UserWhereInput
      orderBy: UserOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [User]!
    usersConnection(
      where: UserWhereInput
      orderBy: UserOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): UserConnection!
    node(id: ID!): Node
  }

  type Rent {
    id: ID!
    post: Post!
    user: User!
    createdAt: DateTime
    updatedAt: DateTime
  }

  type RentConnection {
    pageInfo: PageInfo!
    edges: [RentEdge]!
    aggregate: AggregateRent!
  }

  input RentCreateInput {
    id: ID
    post: PostCreateOneWithoutRentsInput!
    user: UserCreateOneWithoutRentsInput!
  }

  input RentCreateManyWithoutPostInput {
    create: [RentCreateWithoutPostInput!]
    connect: [RentWhereUniqueInput!]
  }

  input RentCreateManyWithoutUserInput {
    create: [RentCreateWithoutUserInput!]
    connect: [RentWhereUniqueInput!]
  }

  input RentCreateWithoutPostInput {
    id: ID
    user: UserCreateOneWithoutRentsInput!
  }

  input RentCreateWithoutUserInput {
    id: ID
    post: PostCreateOneWithoutRentsInput!
  }

  type RentEdge {
    node: Rent!
    cursor: String!
  }

  enum RentOrderByInput {
    id_ASC
    id_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type RentPreviousValues {
    id: ID!
    createdAt: DateTime
    updatedAt: DateTime
  }

  input RentScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [RentScalarWhereInput!]
    OR: [RentScalarWhereInput!]
    NOT: [RentScalarWhereInput!]
  }

  type RentSubscriptionPayload {
    mutation: MutationType!
    node: Rent
    updatedFields: [String!]
    previousValues: RentPreviousValues
  }

  input RentSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: RentWhereInput
    AND: [RentSubscriptionWhereInput!]
    OR: [RentSubscriptionWhereInput!]
    NOT: [RentSubscriptionWhereInput!]
  }

  input RentUpdateInput {
    post: PostUpdateOneRequiredWithoutRentsInput
    user: UserUpdateOneRequiredWithoutRentsInput
  }

  input RentUpdateManyWithoutPostInput {
    create: [RentCreateWithoutPostInput!]
    delete: [RentWhereUniqueInput!]
    connect: [RentWhereUniqueInput!]
    set: [RentWhereUniqueInput!]
    disconnect: [RentWhereUniqueInput!]
    update: [RentUpdateWithWhereUniqueWithoutPostInput!]
    upsert: [RentUpsertWithWhereUniqueWithoutPostInput!]
    deleteMany: [RentScalarWhereInput!]
  }

  input RentUpdateManyWithoutUserInput {
    create: [RentCreateWithoutUserInput!]
    delete: [RentWhereUniqueInput!]
    connect: [RentWhereUniqueInput!]
    set: [RentWhereUniqueInput!]
    disconnect: [RentWhereUniqueInput!]
    update: [RentUpdateWithWhereUniqueWithoutUserInput!]
    upsert: [RentUpsertWithWhereUniqueWithoutUserInput!]
    deleteMany: [RentScalarWhereInput!]
  }

  input RentUpdateWithoutPostDataInput {
    user: UserUpdateOneRequiredWithoutRentsInput
  }

  input RentUpdateWithoutUserDataInput {
    post: PostUpdateOneRequiredWithoutRentsInput
  }

  input RentUpdateWithWhereUniqueWithoutPostInput {
    where: RentWhereUniqueInput!
    data: RentUpdateWithoutPostDataInput!
  }

  input RentUpdateWithWhereUniqueWithoutUserInput {
    where: RentWhereUniqueInput!
    data: RentUpdateWithoutUserDataInput!
  }

  input RentUpsertWithWhereUniqueWithoutPostInput {
    where: RentWhereUniqueInput!
    update: RentUpdateWithoutPostDataInput!
    create: RentCreateWithoutPostInput!
  }

  input RentUpsertWithWhereUniqueWithoutUserInput {
    where: RentWhereUniqueInput!
    update: RentUpdateWithoutUserDataInput!
    create: RentCreateWithoutUserInput!
  }

  input RentWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    post: PostWhereInput
    user: UserWhereInput
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [RentWhereInput!]
    OR: [RentWhereInput!]
    NOT: [RentWhereInput!]
  }

  input RentWhereUniqueInput {
    id: ID
  }

  type Subscription {
    comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
    file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
    post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
    rent(where: RentSubscriptionWhereInput): RentSubscriptionPayload
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  }

  type User {
    id: ID!
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    post(
      where: PostWhereInput
      orderBy: PostOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Post!]
    rents(
      where: RentWhereInput
      orderBy: RentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Rent!]
    comments(
      where: CommentWhereInput
      orderBy: CommentOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Comment!]
    createdAt: DateTime
    updatedAt: DateTime
  }

  type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
  }

  input UserCreateInput {
    id: ID
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    post: PostCreateManyWithoutUserInput
    rents: RentCreateManyWithoutUserInput
    comments: CommentCreateManyWithoutUserInput
  }

  input UserCreateOneWithoutCommentsInput {
    create: UserCreateWithoutCommentsInput
    connect: UserWhereUniqueInput
  }

  input UserCreateOneWithoutPostInput {
    create: UserCreateWithoutPostInput
    connect: UserWhereUniqueInput
  }

  input UserCreateOneWithoutRentsInput {
    create: UserCreateWithoutRentsInput
    connect: UserWhereUniqueInput
  }

  input UserCreateWithoutCommentsInput {
    id: ID
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    post: PostCreateManyWithoutUserInput
    rents: RentCreateManyWithoutUserInput
  }

  input UserCreateWithoutPostInput {
    id: ID
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    rents: RentCreateManyWithoutUserInput
    comments: CommentCreateManyWithoutUserInput
  }

  input UserCreateWithoutRentsInput {
    id: ID
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    post: PostCreateManyWithoutUserInput
    comments: CommentCreateManyWithoutUserInput
  }

  type UserEdge {
    node: User!
    cursor: String!
  }

  enum UserOrderByInput {
    id_ASC
    id_DESC
    username_ASC
    username_DESC
    password_ASC
    password_DESC
    email_ASC
    email_DESC
    verifiedEmail_ASC
    verifiedEmail_DESC
    phoneNumber_ASC
    phoneNumber_DESC
    verifiedPhoneNumber_ASC
    verifiedPhoneNumber_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
  }

  type UserPreviousValues {
    id: ID!
    username: String!
    password: String!
    email: String!
    verifiedEmail: Boolean!
    phoneNumber: String!
    verifiedPhoneNumber: Boolean!
    createdAt: DateTime
    updatedAt: DateTime
  }

  type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
  }

  input UserSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: UserWhereInput
    AND: [UserSubscriptionWhereInput!]
    OR: [UserSubscriptionWhereInput!]
    NOT: [UserSubscriptionWhereInput!]
  }

  input UserUpdateInput {
    username: String
    password: String
    email: String
    verifiedEmail: Boolean
    phoneNumber: String
    verifiedPhoneNumber: Boolean
    post: PostUpdateManyWithoutUserInput
    rents: RentUpdateManyWithoutUserInput
    comments: CommentUpdateManyWithoutUserInput
  }

  input UserUpdateManyMutationInput {
    username: String
    password: String
    email: String
    verifiedEmail: Boolean
    phoneNumber: String
    verifiedPhoneNumber: Boolean
  }

  input UserUpdateOneRequiredWithoutPostInput {
    create: UserCreateWithoutPostInput
    update: UserUpdateWithoutPostDataInput
    upsert: UserUpsertWithoutPostInput
    connect: UserWhereUniqueInput
  }

  input UserUpdateOneRequiredWithoutRentsInput {
    create: UserCreateWithoutRentsInput
    update: UserUpdateWithoutRentsDataInput
    upsert: UserUpsertWithoutRentsInput
    connect: UserWhereUniqueInput
  }

  input UserUpdateOneWithoutCommentsInput {
    create: UserCreateWithoutCommentsInput
    update: UserUpdateWithoutCommentsDataInput
    upsert: UserUpsertWithoutCommentsInput
    delete: Boolean
    disconnect: Boolean
    connect: UserWhereUniqueInput
  }

  input UserUpdateWithoutCommentsDataInput {
    username: String
    password: String
    email: String
    verifiedEmail: Boolean
    phoneNumber: String
    verifiedPhoneNumber: Boolean
    post: PostUpdateManyWithoutUserInput
    rents: RentUpdateManyWithoutUserInput
  }

  input UserUpdateWithoutPostDataInput {
    username: String
    password: String
    email: String
    verifiedEmail: Boolean
    phoneNumber: String
    verifiedPhoneNumber: Boolean
    rents: RentUpdateManyWithoutUserInput
    comments: CommentUpdateManyWithoutUserInput
  }

  input UserUpdateWithoutRentsDataInput {
    username: String
    password: String
    email: String
    verifiedEmail: Boolean
    phoneNumber: String
    verifiedPhoneNumber: Boolean
    post: PostUpdateManyWithoutUserInput
    comments: CommentUpdateManyWithoutUserInput
  }

  input UserUpsertWithoutCommentsInput {
    update: UserUpdateWithoutCommentsDataInput!
    create: UserCreateWithoutCommentsInput!
  }

  input UserUpsertWithoutPostInput {
    update: UserUpdateWithoutPostDataInput!
    create: UserCreateWithoutPostInput!
  }

  input UserUpsertWithoutRentsInput {
    update: UserUpdateWithoutRentsDataInput!
    create: UserCreateWithoutRentsInput!
  }

  input UserWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    username: String
    username_not: String
    username_in: [String!]
    username_not_in: [String!]
    username_lt: String
    username_lte: String
    username_gt: String
    username_gte: String
    username_contains: String
    username_not_contains: String
    username_starts_with: String
    username_not_starts_with: String
    username_ends_with: String
    username_not_ends_with: String
    password: String
    password_not: String
    password_in: [String!]
    password_not_in: [String!]
    password_lt: String
    password_lte: String
    password_gt: String
    password_gte: String
    password_contains: String
    password_not_contains: String
    password_starts_with: String
    password_not_starts_with: String
    password_ends_with: String
    password_not_ends_with: String
    email: String
    email_not: String
    email_in: [String!]
    email_not_in: [String!]
    email_lt: String
    email_lte: String
    email_gt: String
    email_gte: String
    email_contains: String
    email_not_contains: String
    email_starts_with: String
    email_not_starts_with: String
    email_ends_with: String
    email_not_ends_with: String
    verifiedEmail: Boolean
    verifiedEmail_not: Boolean
    phoneNumber: String
    phoneNumber_not: String
    phoneNumber_in: [String!]
    phoneNumber_not_in: [String!]
    phoneNumber_lt: String
    phoneNumber_lte: String
    phoneNumber_gt: String
    phoneNumber_gte: String
    phoneNumber_contains: String
    phoneNumber_not_contains: String
    phoneNumber_starts_with: String
    phoneNumber_not_starts_with: String
    phoneNumber_ends_with: String
    phoneNumber_not_ends_with: String
    verifiedPhoneNumber: Boolean
    verifiedPhoneNumber_not: Boolean
    post_every: PostWhereInput
    post_some: PostWhereInput
    post_none: PostWhereInput
    rents_every: RentWhereInput
    rents_some: RentWhereInput
    rents_none: RentWhereInput
    comments_every: CommentWhereInput
    comments_some: CommentWhereInput
    comments_none: CommentWhereInput
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    AND: [UserWhereInput!]
    OR: [UserWhereInput!]
    NOT: [UserWhereInput!]
  }

  input UserWhereUniqueInput {
    id: ID
    username: String
    email: String
    phoneNumber: String
  }
`;
