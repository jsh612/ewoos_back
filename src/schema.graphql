type CreateCommentResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CreateComment(text: String!, postId: String!): CreateCommentResponse!
  UploadPost(title: String!, location: String!, desc: String!, category: String!, files: [String!]): UploadPostResponse!
  RentStatusUpdate(status: RentStatus!, rentId: String!): RentStatusResponse!
  ReqRent(postId: String!, message: String!): ReqRentResponse!
  ChangePW(oldPW: String!, newPW: String!): ChangePWResponse!
  Login(userId: String!, password: String!): LoginResponse!
  SignUp(userId: String!, username: String!, password: String!, info: String, phoneNumber: String!): SignUpResponse!
  UpdateProfile(username: String, info: String): UpdateProfileResponse!
  VerifyComplete(phoneNumber: String!, secretKey: String!): VerifyCompleteResponse!
  VerifyStart(phoneNumber: String!): VerifyStartResponse!
}

type User {
  id: ID!
  userId: String!
  username: String!
  password: String!
  info: String
  phoneNumber: String!
  verifiedPhoneNumber: Boolean!
  posts: [Post!]
  rents: [Rent!]
  comments: [Comment!]
  createdAt: String
  updatedAt: String
}

type Post {
  id: ID!
  user: User!
  title: String!
  location: String!
  desc: String!
  # category: CategoryOptions!
  category: String!
  files: [File!]
  rents: [Rent!]
  comments: [Comment!]
  createdAt: String
  updatedAt: String
}

enum RentStatus {
  APPLY
  RENT
  DONE
}

type Rent {
  id: ID!
  post: Post!
  user: User!
  message: String!
  status: RentStatus!
  createdAt: String
  updatedAt: String
}

type Comment {
  id: ID!
  text: String!
  user: User!
  post: Post!
  createdAt: String
  updatedAt: String
}

type File {
  id: ID!
  url: String!
  post: Post!
  createdAt: String
  updatedAt: String
}

type Verification {
  id: ID!
  phoneNumber: String!
  secretKey: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}

type Query {
  thing: String
  SearchPost(term: String!): SearchPostResponse!
  GetMe: GetMeResponse
}

type SearchPostResponse {
  ok: Boolean!
  error: String
  posts: [Post]
}

type UploadPostResponse {
  ok: Boolean!
  error: String
}

type RentStatusResponse {
  ok: Boolean!
  error: String
}

type ReqRentResponse {
  ok: Boolean!
  error: String
}

type ChangePWResponse {
  ok: Boolean!
  error: String
}

type GetMeResponse {
  ok: Boolean!
  error: String
  user: User
}

type LoginResponse {
  ok: Boolean!
  error: String
  token: String
  username: String
}

type SignUpResponse {
  ok: Boolean!
  error: String
}

type UpdateProfileResponse {
  ok: Boolean!
  error: String
}

type VerifyCompleteResponse {
  ok: Boolean!
  error: String
}

type VerifyStartResponse {
  ok: Boolean!
  error: String
}
